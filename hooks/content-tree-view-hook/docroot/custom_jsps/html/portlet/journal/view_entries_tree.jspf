<%--
/**
 * Copyright (C) 2005-2014 Rivet Logic Corporation.
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; version 3 of the License.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
--%>

<%@ include file="/html/portlet/rivetlogic_tree/item_selection.jspf" %>

<c:if test='<%= displayStyle.equals(TREE_VIEW) %>'>

<%
	// Base URL for view web content article
	PortletURL viewArticleURL = liferayPortletResponse.createRenderURL();
	viewArticleURL.setParameter("struts_action", "/journal/edit_article");
	viewArticleURL.setParameter("redirect", currentURL);

	List<Long> ancestorIds = new ArrayList<Long>();

	// Root will be always the same (home)
	long treeFolderId = JournalFolderConstants.DEFAULT_PARENT_FOLDER_ID;
	String treeTitle = (displayTerms.getNavigation().isEmpty()?"home":displayTerms.getNavigation());
	String treeFolderTitle = LanguageUtil.get(pageContext, treeTitle);
	
	// Current folder could be different to root
	long currFolderId = treeFolderId;
	String currFolderTitle = treeFolderTitle;
	
	if (folderId != JournalFolderConstants.DEFAULT_PARENT_FOLDER_ID){
	    
	    JournalFolder currFolder = JournalFolderServiceUtil.getFolder(folderId);
	    currFolderId = folderId;
	    currFolderTitle = currFolder.getName(); 
	    
	 	// We need get all ancestors util root
	    List<JournalFolder> ancestors = currFolder.getAncestors();
	 	
	 	// We are simulating the root folder as an ancestor
	 	ancestorIds.add(JournalFolderConstants.DEFAULT_PARENT_FOLDER_ID);
	 	
	 	java.util.ListIterator li = ancestors.listIterator(ancestors.size());
		 // Iterate in reverse
		 while(li.hasPrevious()) {
		     JournalFolder f = (JournalFolder) li.previous();
		     ancestorIds.add(f.getFolderId());
		 }	 
	}
%>
<aui:script use="rl-content-tree-view">

var TREE_CONTAINER = "treeDiv";
var <portlet:namespace />treeViewNode = A.one('#<portlet:namespace />entriesContainer > #<portlet:namespace />'+TREE_CONTAINER);

if (<portlet:namespace />treeViewNode == undefined){
	
	<portlet:namespace />treeView = new A.Rivet.ContentTreeView(
        	{
        		namespace: '<portlet:namespace />',
        		treeBox: TREE_CONTAINER,
        		treeTarget: A.Rivet.TreeTargetJournal,
        		scopeGroupId: '<%= scopeGroupId %>',
        		rootFolderId:'<%= treeFolderId %>',
        		rootFolderLabel: '<%= treeFolderTitle %>',
        		checkAllId: '<%= RowChecker.ALL_ROW_IDS %>',
        		viewPageBaseURL: '<%= viewArticleURL %>',
        		defaultArticleImage: '<%= themeDisplay.getPathThemeImages() + "/file_system/large/article.png" %>'
        	}
    );
}

<% 
	// If current folder is not root (home)
	if (currFolderId != treeFolderId){
     
	 	// Add ancestors' children 
        for (Long ancestorId:  ancestorIds){ 
            
            // Folders
		    List<JournalFolder> cFolders = JournalFolderServiceUtil.getFolders(scopeGroupId, ancestorId);		    
		    
		    for (JournalFolder cFolder: cFolders){
		        boolean isAncestor = false;
			    if ( (cFolder.getFolderId() == currFolderId ) || (ancestorIds.contains(cFolder.getFolderId())) ){
			       isAncestor = true;
			    }
	        	%>
		    	<portlet:namespace />treeView.addContentFolder({
					id: '<%= String.valueOf(cFolder.getFolderId()) %>',
					label: '<%= cFolder.getName() %>',
					showCheckbox: '<%= JournalFolderPermission.contains(permissionChecker, cFolder, ActionKeys.DELETE) || JournalFolderPermission.contains(permissionChecker, cFolder, ActionKeys.UPDATE) %>',
					rowCheckerId: '<%= String.valueOf(cFolder.getFolderId()) %>',
					rowCheckerName: '<%= JournalFolder.class.getSimpleName() %>',
					parentFolderId: '<%= cFolder.getParentFolderId() %>',
					expanded : <%= isAncestor %>,
   			    	fullLoaded : <%= isAncestor %>
				});
		    	<%		 
		    }
		    
		    // Articles
		    List<JournalArticle> cArticles = JournalArticleServiceUtil.getArticles(scopeGroupId, ancestorId);	
		    
		    for (JournalArticle cArticle: cArticles){
		         
		        PortletURL tempRowURL = liferayPortletResponse.createRenderURL();
				tempRowURL.setParameter("struts_action", "/journal/edit_article");
				tempRowURL.setParameter("redirect", currentURL);
				tempRowURL.setParameter("groupId", String.valueOf(cArticle.getGroupId()));
				tempRowURL.setParameter("folderId", String.valueOf(cArticle.getFolderId()));
				tempRowURL.setParameter("articleId", cArticle.getArticleId());
				
		        String articleImageURL = cArticle.getArticleImageURL(themeDisplay);
		        
		        %>		        
		        <portlet:namespace />treeView.addContentEntry({
					id : '<%= cArticle.getArticleId() %>',
					label: '<%= cArticle.getTitle(locale) %>',
					showCheckbox: '<%= JournalArticlePermission.contains(permissionChecker, cArticle, ActionKeys.DELETE) || JournalArticlePermission.contains(permissionChecker, cArticle, ActionKeys.EXPIRE) || JournalArticlePermission.contains(permissionChecker, cArticle, ActionKeys.UPDATE) %>',
					rowCheckerId: '<%= String.valueOf(cArticle.getArticleId()) %>',
					rowCheckerName: '<%= JournalArticle.class.getSimpleName() %>',
					parentFolderId: '<%= cArticle.getFolderId() %>',
					previewURL:'<%= Validator.isNotNull(articleImageURL) ? articleImageURL : themeDisplay.getPathThemeImages() + "/file_system/large/article.png" %>',
					viewURL: '<%= tempRowURL %>'
				});
		        <%
		    }
		}
	}
%>
</aui:script>
</c:if>